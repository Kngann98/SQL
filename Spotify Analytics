--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata(
id INTEGER PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity INTEGER NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal (4,3) NOT NULL,
song_key INTEGER NOT NULL,
loudness decimal (5,3) NOT NULL,
song_mode INTEGER NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL. 

--#1. Select artist name and the number of top 50 songs by artist

SELECT artist_name, COUNT(*) AS total_hits
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY total_hits DESC;

--#2. Based on popularity, what are the top ten songs and artists?

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10;

--#3. What songs on the list are longer than the average duration?

SELECT track_name
FROM BIT_DB.Spotifydata
HAVING duration_ms > AVG(duration_ms);

--#4. First I determined the avg popularity, danceability, and energy by artist and track. 

SELECT AVG(popularity), 
AVG(danceability), 
AVG(energy)
FROM BIT_DB.Spotifydata;

--#5. Calculate the average popularity for the artists in the Spotify data table. Then, for every artist
with an average popularity of 90 or above, show their name, their average popularity, and label them 
as a “Top Star”.


With avg_popularity_CTE AS (
    SELECT s.artist_name, 
    AVG(popularity) AS avg_pop
    FROM Spotifydata s
    GROUP BY s.artist_name
)
SELECT artist_name, avg_pop,
'Top Star' AS tag
FROM avg_popularity_CTE
WHERE avg_pop >= 90;
